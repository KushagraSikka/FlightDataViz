# Flight Trajectory 3D Visualizer for Replit

Based on your flight data and requirements, here's how to implement a comprehensive 3D flight trajectory visualizer on Replit:

## Project Setup on Replit

1. **Create a new Replit project:**
   - Choose "HTML, CSS, JS" template
   - This gives you a web environment to build your visualizer

2. **Install dependencies in your Replit project:**
   - Add these script tags to your HTML:
   ```html
   <!-- Three.js for 3D visualization -->
   <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
   <!-- OrbitControls for camera manipulation -->
   <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
   <!-- PapaParse for CSV processing -->
   <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
   <!-- Plotly for additional 2D charts -->
   <script src="https://cdn.plot.ly/plotly-2.9.0.min.js"></script>
   ```

## Core Implementation Features

### 1. 3D Visualization (Three.js Implementation)

```javascript
// Initialize the Three.js scene
function initScene() {
  const scene = new THREE.Scene();
  scene.background = new THREE.Color(0xf0f0f0);
  
  // Create camera
  const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
  camera.position.set(5, 5, 5);
  
  // Create renderer
  const renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.getElementById('visualization-container').appendChild(renderer.domElement);
  
  // Add orbit controls for camera manipulation
  const controls = new THREE.OrbitControls(camera, renderer.domElement);
  
  // Add grid helper as reference plane
  const gridHelper = new THREE.GridHelper(10, 10);
  scene.add(gridHelper);
  
  // Add axes helper for orientation
  const axesHelper = new THREE.AxesHelper(5);
  scene.add(axesHelper);
  
  // Add lighting
  const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
  scene.add(ambientLight);
  
  const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
  directionalLight.position.set(5, 10, 7.5);
  scene.add(directionalLight);
  
  return { scene, camera, renderer, controls };
}
```

### 2. Multiple View Modes

```javascript
function setViewMode(mode, camera, controls) {
  switch(mode) {
    case 'top-down':
      // North-East view (looking down)
      camera.position.set(0, 10, 0);
      camera.lookAt(0, 0, 0);
      break;
    case 'side':
      // East-Altitude view
      camera.position.set(10, 0, 0);
      camera.lookAt(0, 0, 0);
      break;
    case 'trailing':
      // View from behind aircraft
      // Position will be updated during animation
      break;
    case 'free':
      // Free orbit view (default)
      camera.position.set(5, 5, 5);
      camera.lookAt(0, 0, 0);
      break;
  }
  controls.update();
}
```

### 3. Trajectory Visualization

```javascript
function visualizeTrajectory(data, scene, color = 0x0088ff) {
  // Extract position points
  const points = data.map(point => new THREE.Vector3(
    point.position_e,          // X axis (East)
    -point.position_d,         // Y axis (Up - note the negative since 'd' is down)
    point.position_n           // Z axis (North)
  ));
  
  // Create line geometry
  const geometry = new THREE.BufferGeometry().setFromPoints(points);
  
  // Create line material
  const material = new THREE.LineBasicMaterial({ 
    color: color,
    linewidth: 2  // Note: linewidth > 1 may not work on all GPUs
  });
  
  // Create the line
  const trajectory = new THREE.Line(geometry, material);
  scene.add(trajectory);
  
  // Create aircraft model
  const aircraft = createAircraftModel(color);
  scene.add(aircraft);
  
  return { trajectory, aircraft, points };
}

function createAircraftModel(color) {
  // Simple aircraft representation
  const geometry = new THREE.ConeGeometry(0.2, 0.5, 4);
  geometry.rotateX(Math.PI / 2);
  const material = new THREE.MeshPhongMaterial({ color: color });
  return new THREE.Mesh(geometry, material);
}
```

### 4. Animation and Time Control

```javascript
function animateTrajectory(aircraft, points, timeIndex, data) {
  if (timeIndex < points.length) {
    // Update aircraft position
    aircraft.position.copy(points[timeIndex]);
    
    // Update aircraft orientation based on flight data
    const phi = data[timeIndex].phi || 0;
    const theta = data[timeIndex].theta || 0;
    const psi = data[timeIndex].psi || 0;
    
    // Create rotation matrix from Euler angles
    aircraft.rotation.set(theta, psi, phi);
    
    // Update time display
    updateTimeDisplay(data[timeIndex].sec, data[timeIndex].nanosec);
  }
}

function updateTimeDisplay(sec, nanosec) {
  const totalSec = sec + (nanosec / 1e9);
  const minutes = Math.floor(totalSec / 60);
  const seconds = Math.floor(totalSec % 60);
  const milliseconds = Math.floor((totalSec - Math.floor(totalSec)) * 1000);
    
  const timeStr = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}.${milliseconds.toString().padStart(3, '0')}`;
  document.getElementById('time-display').textContent = timeStr;
}
```

### 5. Multiple Trajectory Comparison

```javascript
function loadMultipleTrajectories(fileList, scene) {
  const trajectories = [];
  const colors = [0x0088ff, 0xff8800, 0x88ff00, 0xff0088, 0x00ff88, 0x8800ff];
  
  Array.from(fileList).forEach((file, index) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      const data = parseCSVData(e.target.result);
      // Use different color for each trajectory
      const color = colors[index % colors.length];
      const trajectory = visualizeTrajectory(data, scene, color);
      
      trajectories.push({
        name: file.name,
        data: data,
        objects: trajectory,
        color: color
      });
      
      // Update trajectory list in UI
      updateTrajectoryList(trajectories);
    };
    reader.readAsText(file);
  });
  
  return trajectories;
}

function updateTrajectoryList(trajectories) {
  const listElement = document.getElementById('trajectory-list');
  listElement.innerHTML = '';
  
  trajectories.forEach((traj, index) => {
    const item = document.createElement('div');
    item.className = 'trajectory-item';
    
    const colorBox = document.createElement('span');
    colorBox.className = 'color-box';
    colorBox.style.backgroundColor = `#${traj.color.toString(16).padStart(6, '0')}`;
    
    const name = document.createElement('span');
    name.textContent = traj.name;
    
    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.checked = true;
    checkbox.onchange = () => {
      // Toggle visibility of trajectory
      traj.objects.trajectory.visible = checkbox.checked;
      traj.objects.aircraft.visible = checkbox.checked;
    };
    
    item.appendChild(checkbox);
    item.appendChild(colorBox);
    item.appendChild(name);
    listElement.appendChild(item);
  });
}
```

## HTML Structure for Replit

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>3D Flight Trajectory Visualizer</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <div class="app-container">
    <div class="sidebar">
      <h2>Flight Trajectory Visualizer</h2>
      
      <div class="control-panel">
        <h3>File Upload</h3>
        <input type="file" id="file-input" multiple accept=".csv,.txt">
        <button id="load-files-btn">Load Files</button>
      </div>
      
      <div class="control-panel">
        <h3>View Mode</h3>
        <select id="view-mode">
          <option value="free">Free Orbit</option>
          <option value="top-down">Top Down (N-E)</option>
          <option value="side">Side View (E-Alt)</option>
          <option value="trailing">Trailing View</option>
        </select>
      </div>
      
      <div class="control-panel">
        <h3>Time Control</h3>
        <div class="time-controls">
          <button id="play-btn">Play</button>
          <button id="pause-btn">Pause</button>
          <span id="time-display">00:00.000</span>
        </div>
        <input type="range" id="time-slider" min="0" max="100" value="0">
        <div class="playback-speed">
          <label>Speed: </label>
          <select id="playback-speed">
            <option value="0.25">0.25x</option>
            <option value="0.5">0.5x</option>
            <option value="1" selected>1x</option>
            <option value="2">2x</option>
            <option value="5">5x</option>
          </select>
        </div>
      </div>
      
      <div class="control-panel">
        <h3>Trajectories</h3>
        <div id="trajectory-list">
          <!-- Trajectories will be listed here -->
        </div>
      </div>
      
      <div class="data-display">
        <h3>Current Data</h3>
        <table id="data-table">
          <tr><td>North:</td><td id="data-n">--</td></tr>
          <tr><td>East:</td><td id="data-e">--</td></tr>
          <tr><td>Altitude:</td><td id="data-alt">--</td></tr>
          <tr><td>Velocity:</td><td id="data-vel">--</td></tr>
          <tr><td>Heading:</td><td id="data-hdg">--</td></tr>
        </table>
      </div>
    </div>
    
    <div id="visualization-container">
      <!-- 3D visualization will be rendered here -->
    </div>
    
    <div id="charts-container">
      <div id="position-chart" class="chart"></div>
      <div id="velocity-chart" class="chart"></div>
    </div>
  </div>
  
  <!-- Load scripts (as mentioned in setup) -->
  <script src="script.js"></script>
</body>
</html>
```

## Additional Features for Your Replit Project

### 1. View Modes

- **3D Full View**: Free orbit camera to examine trajectory from any angle
- **Top-Down View**: North-East plane for traditional map-like visualization  
- **Side View**: East-Altitude profile for elevation changes
- **Multiple Trajectories**: Synchronized display of multiple flight paths
- **First-Person View**: Camera positioned at the aircraft's position looking forward

### 2. Analysis Tools

- **Data Table**: Real-time display of flight parameters
- **Time Synchronization**: Compare different flights at the same timestep
- **Parameter Plots**: 2D plots for specific parameters (velocity, altitude, etc.)
- **Statistics Panel**: Min/max/average values for key parameters

### 3. User Experience Features

- **Trajectory Colorization**: Color coding based on selected parameters (e.g., velocity)
- **Adjustable Playback Speed**: Control animation speed for detailed analysis
- **Camera Following Modes**: Various perspectives including chasing the aircraft
- **Visual References**: Grid, axes, and terrain reference (if altitude data available)

## Tips for Replit Implementation

1. **Optimize Performance**:
   - Decimate data points for smoother rendering if files are large
   - Use WebGL renderer with appropriate settings for Replit's environment

2. **Handle Multiple Files**:
   - Implement drag-and-drop for easy file loading
   - Add file management UI for selecting active files

3. **User Interface**:
   - Create clear controls for switching between view modes
   - Add parameter selection for customizing visualizations

4. **Data Processing**:
   - Implement time synchronization between different files
   - Add filtering options for noisy data

Is there a specific aspect of this implementation you'd like me to elaborate on? For example, I can provide more detailed code for the Three.js scene setup, the trajectory animation logic, or the file loading system.